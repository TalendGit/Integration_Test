package routines;

import java.io.StringWriter;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import rcbsdwh.dn_feed_0_4.DN_Feed.DNAssetRecordStruct;

import bt.client.xsd.dnasset.BTRCAssetFeed;
import bt.client.xsd.dnasset.BTRCAssetFeed.Customer;
import bt.client.xsd.dnasset.BTRCAssetFeed.Customer.Asset;


/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class DNAssetMapper {

	private static BTRCAssetFeed dnAssetDoc = new BTRCAssetFeed();
	private static BigDecimal rcUserId = BigDecimal.ZERO;
	private static Customer currentCustomer;
    
    public static BTRCAssetFeed getDnAssetDoc() {
		return dnAssetDoc;
	}
    
	public static void buildDocument(DNAssetRecordStruct dns) {
		if ( ! rcUserId.equals(dns.getRC_USERID()) ) {
			if ( rcUserId == BigDecimal.ZERO || dns.getRC_USERID() == null) {
				dnAssetDoc.setSequenceNumber(dns.getSEQUENCE_NUMBER());
				dnAssetDoc.setTimeOfGeneration(getXMLGregorianFormatedDate(dns.getTIME_OF_GENERATION()));
			}
			rcUserId = dns.getRC_USERID();
			Customer customer = new Customer();
			customer.setBTBAC(dns.getBT_BAC());
			customer.setBTCRMAccount(dns.getBT_CRM_ACCOUNT());
			dnAssetDoc.getCustomer().add(customer);	
			currentCustomer = customer;
//			System.out.println("  RC_USERID: " + rcUserId + " SqNo: " + dnAssetDoc.getSequenceNumber() + " Time: " + dnAssetDoc.getTimeOfGeneration());
			System.out.println("  RC_USERID: " + rcUserId);
		}
		
		Asset asset = new Asset();
		asset.setAction(dns.getACTION_TYPE());
		asset.setBTRCUID(dns.getBTRC_UID());
		asset.setProductCode(dns.getPRODUCT_CODE());
		asset.setServiceIDOldValue(dns.getSERVICEID_OLD_VALUE());
		asset.setServiceIDNewValue(dns.getSERVICEID_NEW_VALUE());
		asset.setAssetKey(dns.getASSET_KEY());
		asset.setParentAssetKey(dns.getPARENT_ASSET_KEY());
		
		currentCustomer.getAsset().add(asset);
	}
	
	private static XMLGregorianCalendar getXMLGregorianFormatedDate(String dateString) {
		XMLGregorianCalendar invoicePeriodDate = null;		
		if ( dateString != null ) {
			try {
				DateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd");
//				String strDate=dateFormat.format(dateString);
				invoicePeriodDate = DatatypeFactory.newInstance().newXMLGregorianCalendar(dateString);
			}
			catch (DatatypeConfigurationException e) {
				// TODO: handle exception
			}
		}
		return invoicePeriodDate;
	}
	
	public static String buildXMLDocument() throws JAXBException {
		String dnAssetXML = null;
		try {
			JAXBContext context = JAXBContext.newInstance(BTRCAssetFeed.class);
			Marshaller marshaller = context.createMarshaller();
			StringWriter stringWriter = new StringWriter();
			marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);						
			marshaller.marshal(dnAssetDoc, stringWriter);
			dnAssetXML = stringWriter.toString();
		}
		catch (JAXBException e) {
			// TODO: handle exception
		}
		return dnAssetXML;
	}
}
